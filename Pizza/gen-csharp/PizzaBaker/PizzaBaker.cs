/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace PizzaBaker
{
  public partial class PizzaBaker {
    public interface ISync {
      string GetID();
      bool PrepareMeal(string OrderID, string DishID, int Quantity);
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_GetID(AsyncCallback callback, object state);
      string End_GetID(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_PrepareMeal(AsyncCallback callback, object state, string OrderID, string DishID, int Quantity);
      bool End_PrepareMeal(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetID(AsyncCallback callback, object state)
      {
        return send_GetID(callback, state);
      }

      public string End_GetID(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetID();
      }

      #endif

      public string GetID()
      {
        #if !SILVERLIGHT
        send_GetID();
        return recv_GetID();

        #else
        var asyncResult = Begin_GetID(null, null);
        return End_GetID(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetID(AsyncCallback callback, object state)
      #else
      public void send_GetID()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetID", TMessageType.Call, seqid_));
        GetID_args args = new GetID_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_GetID()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetID_result result = new GetID_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error) {
          throw result.Error;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetID failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PrepareMeal(AsyncCallback callback, object state, string OrderID, string DishID, int Quantity)
      {
        return send_PrepareMeal(callback, state, OrderID, DishID, Quantity);
      }

      public bool End_PrepareMeal(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PrepareMeal();
      }

      #endif

      public bool PrepareMeal(string OrderID, string DishID, int Quantity)
      {
        #if !SILVERLIGHT
        send_PrepareMeal(OrderID, DishID, Quantity);
        return recv_PrepareMeal();

        #else
        var asyncResult = Begin_PrepareMeal(null, null, OrderID, DishID, Quantity);
        return End_PrepareMeal(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PrepareMeal(AsyncCallback callback, object state, string OrderID, string DishID, int Quantity)
      #else
      public void send_PrepareMeal(string OrderID, string DishID, int Quantity)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PrepareMeal", TMessageType.Call, seqid_));
        PrepareMeal_args args = new PrepareMeal_args();
        args.OrderID = OrderID;
        args.DishID = DishID;
        args.Quantity = Quantity;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_PrepareMeal()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PrepareMeal_result result = new PrepareMeal_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error) {
          throw result.Error;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PrepareMeal failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["GetID"] = GetID_Process;
        processMap_["PrepareMeal"] = PrepareMeal_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void GetID_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetID_args args = new GetID_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetID_result result = new GetID_result();
        try
        {
          try
          {
            result.Success = iface_.GetID();
          }
          catch (EPizzaBaker error)
          {
            result.Error = error;
          }
          oprot.WriteMessageBegin(new TMessage("GetID", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetID", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PrepareMeal_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PrepareMeal_args args = new PrepareMeal_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PrepareMeal_result result = new PrepareMeal_result();
        try
        {
          try
          {
            result.Success = iface_.PrepareMeal(args.OrderID, args.DishID, args.Quantity);
          }
          catch (EPizzaBaker error)
          {
            result.Error = error;
          }
          oprot.WriteMessageBegin(new TMessage("PrepareMeal", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PrepareMeal", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetID_args : TBase
    {

      public GetID_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetID_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that) {
        var other = that as GetID_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return true;
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetID_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetID_result : TBase
    {
      private string _success;
      private EPizzaBaker _error;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public EPizzaBaker Error
      {
        get
        {
          return _error;
        }
        set
        {
          __isset.error = true;
          this._error = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error;
      }

      public GetID_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Error = new EPizzaBaker();
                  Error.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetID_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.error) {
            if (Error != null) {
              field.Name = "Error";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Error.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that) {
        var other = that as GetID_result;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
          && ((__isset.error == other.__isset.error) && ((!__isset.error) || (System.Object.Equals(Error, other.Error))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.success ? 0 : (Success.GetHashCode()));
          hashcode = (hashcode * 397) ^ (!__isset.error ? 0 : (Error.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetID_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Error != null && __isset.error) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Error: ");
          __sb.Append(Error== null ? "<null>" : Error.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PrepareMeal_args : TBase
    {
      private string _OrderID;
      private string _DishID;
      private int _Quantity;

      public string OrderID
      {
        get
        {
          return _OrderID;
        }
        set
        {
          __isset.OrderID = true;
          this._OrderID = value;
        }
      }

      public string DishID
      {
        get
        {
          return _DishID;
        }
        set
        {
          __isset.DishID = true;
          this._DishID = value;
        }
      }

      public int Quantity
      {
        get
        {
          return _Quantity;
        }
        set
        {
          __isset.Quantity = true;
          this._Quantity = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool OrderID;
        public bool DishID;
        public bool Quantity;
      }

      public PrepareMeal_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  OrderID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  DishID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I32) {
                  Quantity = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PrepareMeal_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (OrderID != null && __isset.OrderID) {
            field.Name = "OrderID";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(OrderID);
            oprot.WriteFieldEnd();
          }
          if (DishID != null && __isset.DishID) {
            field.Name = "DishID";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(DishID);
            oprot.WriteFieldEnd();
          }
          if (__isset.Quantity) {
            field.Name = "Quantity";
            field.Type = TType.I32;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Quantity);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that) {
        var other = that as PrepareMeal_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.OrderID == other.__isset.OrderID) && ((!__isset.OrderID) || (System.Object.Equals(OrderID, other.OrderID))))
          && ((__isset.DishID == other.__isset.DishID) && ((!__isset.DishID) || (System.Object.Equals(DishID, other.DishID))))
          && ((__isset.Quantity == other.__isset.Quantity) && ((!__isset.Quantity) || (System.Object.Equals(Quantity, other.Quantity))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.OrderID ? 0 : (OrderID.GetHashCode()));
          hashcode = (hashcode * 397) ^ (!__isset.DishID ? 0 : (DishID.GetHashCode()));
          hashcode = (hashcode * 397) ^ (!__isset.Quantity ? 0 : (Quantity.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PrepareMeal_args(");
        bool __first = true;
        if (OrderID != null && __isset.OrderID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("OrderID: ");
          __sb.Append(OrderID);
        }
        if (DishID != null && __isset.DishID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("DishID: ");
          __sb.Append(DishID);
        }
        if (__isset.Quantity) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Quantity: ");
          __sb.Append(Quantity);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PrepareMeal_result : TBase
    {
      private bool _success;
      private EPizzaBaker _error;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public EPizzaBaker Error
      {
        get
        {
          return _error;
        }
        set
        {
          __isset.error = true;
          this._error = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error;
      }

      public PrepareMeal_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Error = new EPizzaBaker();
                  Error.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PrepareMeal_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.error) {
            if (Error != null) {
              field.Name = "Error";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Error.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that) {
        var other = that as PrepareMeal_result;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
          && ((__isset.error == other.__isset.error) && ((!__isset.error) || (System.Object.Equals(Error, other.Error))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.success ? 0 : (Success.GetHashCode()));
          hashcode = (hashcode * 397) ^ (!__isset.error ? 0 : (Error.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PrepareMeal_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Error != null && __isset.error) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Error: ");
          __sb.Append(Error== null ? "<null>" : Error.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
