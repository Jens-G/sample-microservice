/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Pizzeria
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Order : TBase
  {
    private List<OrderPosition> _Positions;

    public List<OrderPosition> Positions
    {
      get
      {
        return _Positions;
      }
      set
      {
        __isset.Positions = true;
        this._Positions = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Positions;
    }

    public Order() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.List) {
                {
                  Positions = new List<OrderPosition>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    OrderPosition _elem2;
                    _elem2 = new OrderPosition();
                    _elem2.Read(iprot);
                    Positions.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Order");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Positions != null && __isset.Positions) {
          field.Name = "Positions";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Positions.Count));
            foreach (OrderPosition _iter3 in Positions)
            {
              _iter3.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that) {
      var other = that as Order;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.Positions == other.__isset.Positions) && ((!__isset.Positions) || (TCollections.Equals(Positions, other.Positions))));
    }

    public override int GetHashCode() {
      int hashcode = 0;
      unchecked {
        hashcode = (hashcode * 397) ^ (!__isset.Positions ? 0 : (TCollections.GetHashCode(Positions)));
      }
      return hashcode;
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Order(");
      bool __first = true;
      if (Positions != null && __isset.Positions) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Positions: ");
        __sb.Append(Positions);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
