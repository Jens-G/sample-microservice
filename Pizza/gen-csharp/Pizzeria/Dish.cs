/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Pizzeria
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Dish : TBase
  {
    private string _ID;
    private double _Price;
    private string _Description;
    private string _Notes;

    public string ID
    {
      get
      {
        return _ID;
      }
      set
      {
        __isset.ID = true;
        this._ID = value;
      }
    }

    public double Price
    {
      get
      {
        return _Price;
      }
      set
      {
        __isset.Price = true;
        this._Price = value;
      }
    }

    public string Description
    {
      get
      {
        return _Description;
      }
      set
      {
        __isset.Description = true;
        this._Description = value;
      }
    }

    public string Notes
    {
      get
      {
        return _Notes;
      }
      set
      {
        __isset.Notes = true;
        this._Notes = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ID;
      public bool Price;
      public bool Description;
      public bool Notes;
    }

    public Dish() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Double) {
                Price = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Description = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Notes = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Dish");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ID != null && __isset.ID) {
          field.Name = "ID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ID);
          oprot.WriteFieldEnd();
        }
        if (__isset.Price) {
          field.Name = "Price";
          field.Type = TType.Double;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Price);
          oprot.WriteFieldEnd();
        }
        if (Description != null && __isset.Description) {
          field.Name = "Description";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Description);
          oprot.WriteFieldEnd();
        }
        if (Notes != null && __isset.Notes) {
          field.Name = "Notes";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Notes);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that) {
      var other = that as Dish;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.ID == other.__isset.ID) && ((!__isset.ID) || (System.Object.Equals(ID, other.ID))))
        && ((__isset.Price == other.__isset.Price) && ((!__isset.Price) || (System.Object.Equals(Price, other.Price))))
        && ((__isset.Description == other.__isset.Description) && ((!__isset.Description) || (System.Object.Equals(Description, other.Description))))
        && ((__isset.Notes == other.__isset.Notes) && ((!__isset.Notes) || (System.Object.Equals(Notes, other.Notes))));
    }

    public override int GetHashCode() {
      int hashcode = 0;
      unchecked {
        hashcode = (hashcode * 397) ^ (!__isset.ID ? 0 : (ID.GetHashCode()));
        hashcode = (hashcode * 397) ^ (!__isset.Price ? 0 : (Price.GetHashCode()));
        hashcode = (hashcode * 397) ^ (!__isset.Description ? 0 : (Description.GetHashCode()));
        hashcode = (hashcode * 397) ^ (!__isset.Notes ? 0 : (Notes.GetHashCode()));
      }
      return hashcode;
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Dish(");
      bool __first = true;
      if (ID != null && __isset.ID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ID: ");
        __sb.Append(ID);
      }
      if (__isset.Price) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Price: ");
        __sb.Append(Price);
      }
      if (Description != null && __isset.Description) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Description: ");
        __sb.Append(Description);
      }
      if (Notes != null && __isset.Notes) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Notes: ");
        __sb.Append(Notes);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
