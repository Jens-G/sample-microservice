/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Pizzeria
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class OrderPosition : TBase
  {
    private int _Quantity;
    private string _DishID;

    public int Quantity
    {
      get
      {
        return _Quantity;
      }
      set
      {
        __isset.Quantity = true;
        this._Quantity = value;
      }
    }

    public string DishID
    {
      get
      {
        return _DishID;
      }
      set
      {
        __isset.DishID = true;
        this._DishID = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Quantity;
      public bool DishID;
    }

    public OrderPosition() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Quantity = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                DishID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("OrderPosition");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.Quantity) {
          field.Name = "Quantity";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Quantity);
          oprot.WriteFieldEnd();
        }
        if (DishID != null && __isset.DishID) {
          field.Name = "DishID";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DishID);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that) {
      var other = that as OrderPosition;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.Quantity == other.__isset.Quantity) && ((!__isset.Quantity) || (System.Object.Equals(Quantity, other.Quantity))))
        && ((__isset.DishID == other.__isset.DishID) && ((!__isset.DishID) || (System.Object.Equals(DishID, other.DishID))));
    }

    public override int GetHashCode() {
      int hashcode = 0;
      unchecked {
        hashcode = (hashcode * 397) ^ (!__isset.Quantity ? 0 : (Quantity.GetHashCode()));
        hashcode = (hashcode * 397) ^ (!__isset.DishID ? 0 : (DishID.GetHashCode()));
      }
      return hashcode;
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("OrderPosition(");
      bool __first = true;
      if (__isset.Quantity) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Quantity: ");
        __sb.Append(Quantity);
      }
      if (DishID != null && __isset.DishID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DishID: ");
        __sb.Append(DishID);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
