/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Pizzeria
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class WorkItem : TBase
  {
    private string _OrderID;
    private OrderPosition _OrderPosition;

    public string OrderID
    {
      get
      {
        return _OrderID;
      }
      set
      {
        __isset.OrderID = true;
        this._OrderID = value;
      }
    }

    public OrderPosition OrderPosition
    {
      get
      {
        return _OrderPosition;
      }
      set
      {
        __isset.OrderPosition = true;
        this._OrderPosition = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool OrderID;
      public bool OrderPosition;
    }

    public WorkItem() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                OrderID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                OrderPosition = new OrderPosition();
                OrderPosition.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("WorkItem");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (OrderID != null && __isset.OrderID) {
          field.Name = "OrderID";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OrderID);
          oprot.WriteFieldEnd();
        }
        if (OrderPosition != null && __isset.OrderPosition) {
          field.Name = "OrderPosition";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          OrderPosition.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that) {
      var other = that as WorkItem;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.OrderID == other.__isset.OrderID) && ((!__isset.OrderID) || (System.Object.Equals(OrderID, other.OrderID))))
        && ((__isset.OrderPosition == other.__isset.OrderPosition) && ((!__isset.OrderPosition) || (System.Object.Equals(OrderPosition, other.OrderPosition))));
    }

    public override int GetHashCode() {
      int hashcode = 0;
      unchecked {
        hashcode = (hashcode * 397) ^ (!__isset.OrderID ? 0 : (OrderID.GetHashCode()));
        hashcode = (hashcode * 397) ^ (!__isset.OrderPosition ? 0 : (OrderPosition.GetHashCode()));
      }
      return hashcode;
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("WorkItem(");
      bool __first = true;
      if (OrderID != null && __isset.OrderID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("OrderID: ");
        __sb.Append(OrderID);
      }
      if (OrderPosition != null && __isset.OrderPosition) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("OrderPosition: ");
        __sb.Append(OrderPosition== null ? "<null>" : OrderPosition.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
