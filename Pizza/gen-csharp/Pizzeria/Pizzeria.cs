/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Pizzeria
{
  public partial class Pizzeria {
    public interface ISync {
      List<Dish> GetTheMenue();
      string PlaceOrder(Order order);
      bool CheckAndDeliver(string orderID);
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_GetTheMenue(AsyncCallback callback, object state);
      List<Dish> End_GetTheMenue(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_PlaceOrder(AsyncCallback callback, object state, Order order);
      string End_PlaceOrder(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_CheckAndDeliver(AsyncCallback callback, object state, string orderID);
      bool End_CheckAndDeliver(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetTheMenue(AsyncCallback callback, object state)
      {
        return send_GetTheMenue(callback, state);
      }

      public List<Dish> End_GetTheMenue(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetTheMenue();
      }

      #endif

      public List<Dish> GetTheMenue()
      {
        #if !SILVERLIGHT
        send_GetTheMenue();
        return recv_GetTheMenue();

        #else
        var asyncResult = Begin_GetTheMenue(null, null);
        return End_GetTheMenue(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetTheMenue(AsyncCallback callback, object state)
      #else
      public void send_GetTheMenue()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetTheMenue", TMessageType.Call, seqid_));
        GetTheMenue_args args = new GetTheMenue_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Dish> recv_GetTheMenue()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetTheMenue_result result = new GetTheMenue_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error) {
          throw result.Error;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetTheMenue failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PlaceOrder(AsyncCallback callback, object state, Order order)
      {
        return send_PlaceOrder(callback, state, order);
      }

      public string End_PlaceOrder(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PlaceOrder();
      }

      #endif

      public string PlaceOrder(Order order)
      {
        #if !SILVERLIGHT
        send_PlaceOrder(order);
        return recv_PlaceOrder();

        #else
        var asyncResult = Begin_PlaceOrder(null, null, order);
        return End_PlaceOrder(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PlaceOrder(AsyncCallback callback, object state, Order order)
      #else
      public void send_PlaceOrder(Order order)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PlaceOrder", TMessageType.Call, seqid_));
        PlaceOrder_args args = new PlaceOrder_args();
        args.Order = order;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_PlaceOrder()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PlaceOrder_result result = new PlaceOrder_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error) {
          throw result.Error;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PlaceOrder failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_CheckAndDeliver(AsyncCallback callback, object state, string orderID)
      {
        return send_CheckAndDeliver(callback, state, orderID);
      }

      public bool End_CheckAndDeliver(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_CheckAndDeliver();
      }

      #endif

      public bool CheckAndDeliver(string orderID)
      {
        #if !SILVERLIGHT
        send_CheckAndDeliver(orderID);
        return recv_CheckAndDeliver();

        #else
        var asyncResult = Begin_CheckAndDeliver(null, null, orderID);
        return End_CheckAndDeliver(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_CheckAndDeliver(AsyncCallback callback, object state, string orderID)
      #else
      public void send_CheckAndDeliver(string orderID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("CheckAndDeliver", TMessageType.Call, seqid_));
        CheckAndDeliver_args args = new CheckAndDeliver_args();
        args.OrderID = orderID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_CheckAndDeliver()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        CheckAndDeliver_result result = new CheckAndDeliver_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error) {
          throw result.Error;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CheckAndDeliver failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["GetTheMenue"] = GetTheMenue_Process;
        processMap_["PlaceOrder"] = PlaceOrder_Process;
        processMap_["CheckAndDeliver"] = CheckAndDeliver_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void GetTheMenue_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetTheMenue_args args = new GetTheMenue_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetTheMenue_result result = new GetTheMenue_result();
        try
        {
          try
          {
            result.Success = iface_.GetTheMenue();
          }
          catch (EPizzeria error)
          {
            result.Error = error;
          }
          oprot.WriteMessageBegin(new TMessage("GetTheMenue", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetTheMenue", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PlaceOrder_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PlaceOrder_args args = new PlaceOrder_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PlaceOrder_result result = new PlaceOrder_result();
        try
        {
          try
          {
            result.Success = iface_.PlaceOrder(args.Order);
          }
          catch (EPizzeria error)
          {
            result.Error = error;
          }
          oprot.WriteMessageBegin(new TMessage("PlaceOrder", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PlaceOrder", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void CheckAndDeliver_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        CheckAndDeliver_args args = new CheckAndDeliver_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        CheckAndDeliver_result result = new CheckAndDeliver_result();
        try
        {
          try
          {
            result.Success = iface_.CheckAndDeliver(args.OrderID);
          }
          catch (EPizzeria error)
          {
            result.Error = error;
          }
          oprot.WriteMessageBegin(new TMessage("CheckAndDeliver", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("CheckAndDeliver", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetTheMenue_args : TBase
    {

      public GetTheMenue_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetTheMenue_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that) {
        var other = that as GetTheMenue_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return true;
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetTheMenue_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetTheMenue_result : TBase
    {
      private List<Dish> _success;
      private EPizzeria _error;

      public List<Dish> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public EPizzeria Error
      {
        get
        {
          return _error;
        }
        set
        {
          __isset.error = true;
          this._error = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error;
      }

      public GetTheMenue_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<Dish>();
                    TList _list4 = iprot.ReadListBegin();
                    for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                    {
                      Dish _elem6;
                      _elem6 = new Dish();
                      _elem6.Read(iprot);
                      Success.Add(_elem6);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Error = new EPizzeria();
                  Error.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetTheMenue_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (Dish _iter7 in Success)
                {
                  _iter7.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.error) {
            if (Error != null) {
              field.Name = "Error";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Error.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that) {
        var other = that as GetTheMenue_result;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (TCollections.Equals(Success, other.Success))))
          && ((__isset.error == other.__isset.error) && ((!__isset.error) || (System.Object.Equals(Error, other.Error))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.success ? 0 : (TCollections.GetHashCode(Success)));
          hashcode = (hashcode * 397) ^ (!__isset.error ? 0 : (Error.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetTheMenue_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Error != null && __isset.error) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Error: ");
          __sb.Append(Error== null ? "<null>" : Error.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlaceOrder_args : TBase
    {
      private Order _order;

      public Order Order
      {
        get
        {
          return _order;
        }
        set
        {
          __isset.order = true;
          this._order = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool order;
      }

      public PlaceOrder_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Order = new Order();
                  Order.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlaceOrder_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Order != null && __isset.order) {
            field.Name = "order";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Order.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that) {
        var other = that as PlaceOrder_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.order == other.__isset.order) && ((!__isset.order) || (System.Object.Equals(Order, other.Order))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.order ? 0 : (Order.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlaceOrder_args(");
        bool __first = true;
        if (Order != null && __isset.order) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Order: ");
          __sb.Append(Order== null ? "<null>" : Order.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PlaceOrder_result : TBase
    {
      private string _success;
      private EPizzeria _error;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public EPizzeria Error
      {
        get
        {
          return _error;
        }
        set
        {
          __isset.error = true;
          this._error = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error;
      }

      public PlaceOrder_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Error = new EPizzeria();
                  Error.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PlaceOrder_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.error) {
            if (Error != null) {
              field.Name = "Error";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Error.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that) {
        var other = that as PlaceOrder_result;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
          && ((__isset.error == other.__isset.error) && ((!__isset.error) || (System.Object.Equals(Error, other.Error))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.success ? 0 : (Success.GetHashCode()));
          hashcode = (hashcode * 397) ^ (!__isset.error ? 0 : (Error.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PlaceOrder_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Error != null && __isset.error) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Error: ");
          __sb.Append(Error== null ? "<null>" : Error.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CheckAndDeliver_args : TBase
    {
      private string _orderID;

      public string OrderID
      {
        get
        {
          return _orderID;
        }
        set
        {
          __isset.orderID = true;
          this._orderID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool orderID;
      }

      public CheckAndDeliver_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  OrderID = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("CheckAndDeliver_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (OrderID != null && __isset.orderID) {
            field.Name = "orderID";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(OrderID);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that) {
        var other = that as CheckAndDeliver_args;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.orderID == other.__isset.orderID) && ((!__isset.orderID) || (System.Object.Equals(OrderID, other.OrderID))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.orderID ? 0 : (OrderID.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("CheckAndDeliver_args(");
        bool __first = true;
        if (OrderID != null && __isset.orderID) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("OrderID: ");
          __sb.Append(OrderID);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CheckAndDeliver_result : TBase
    {
      private bool _success;
      private EPizzeria _error;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public EPizzeria Error
      {
        get
        {
          return _error;
        }
        set
        {
          __isset.error = true;
          this._error = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error;
      }

      public CheckAndDeliver_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  Error = new EPizzeria();
                  Error.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("CheckAndDeliver_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.error) {
            if (Error != null) {
              field.Name = "Error";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              Error.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that) {
        var other = that as CheckAndDeliver_result;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
          && ((__isset.error == other.__isset.error) && ((!__isset.error) || (System.Object.Equals(Error, other.Error))));
      }

      public override int GetHashCode() {
        int hashcode = 0;
        unchecked {
          hashcode = (hashcode * 397) ^ (!__isset.success ? 0 : (Success.GetHashCode()));
          hashcode = (hashcode * 397) ^ (!__isset.error ? 0 : (Error.GetHashCode()));
        }
        return hashcode;
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("CheckAndDeliver_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Error != null && __isset.error) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Error: ");
          __sb.Append(Error== null ? "<null>" : Error.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
